#BlueJ class context
comment0.params=row\ col
comment0.target=Circuit(int,\ int)
comment0.text=\n\ Constructs\ a\ new\ Circuit\ object\ with\ a\ grid\ of\ terminals\ with\ particular\ dimensions\n\ @param\ row\ The\ number\ of\ rows\ of\ terminals\ in\ the\ circuit\n\ @param\ col\ The\ number\ of\ columns\ of\ terminals\ in\ the\ circuit\n
comment1.params=origCircuit
comment1.target=Circuit(Circuit)
comment1.text=\n\ Constructs\ a\ copy\ of\ a\ given\ circuit\ by\ adding\ in\ the\ same\ set\ of\ components.\ Information\ regarding\n\ branches,\ currents,\ etc.\ will\ NOT\ be\ copied.\ These\ can\ be\ regenerated\ by\ using\ findNodes(),\n\ labelBranches()\ and\ solve().\n\ @param\ origCircuit\ The\ Circuit\ object\ that\ you\ wish\ to\ copy\n
comment10.params=b\ r1\ c1\ r2\ c2\ posEndRow\ posEndCol
comment10.target=boolean\ addBattery(Battery,\ int,\ int,\ int,\ int,\ int,\ int)
comment10.text=\n\ Like\ addComponent,\ but\ used\ only\ for\ batteries.\n\ @param\ b\ \ The\ battery\ to\ be\ added\n\ @param\ r1\ \ Endpoint\ 1's\ row\n\ @param\ c1\ \ Endpoint\ 1's\ column\n\ @param\ r2\ Endpoint\ 2's\ row\n\ @param\ c2\ \ Endpoint\ 2's\ column\n\ @param\ posEndRow\ \ Positive\ terminal's\ row\n\ @param\ posEndCol\ \ Positive\ terminal's\ column\n\ return\ \ True\ if\ component\ is\ successfully\ added\ to\ circuit;\ false\ if\ the\ component\ was\ not\ added\n
comment11.params=r1\ c1\ r2\ c2
comment11.target=void\ removeComponent(int,\ int,\ int,\ int)
comment11.text=\n\ Removes\ a\ component\ from\ a\ specified\ location\ within\ a\ circuit.\ This\ can\ be\ used\ in\ the\ process\ \n\ of\ desiging\ a\ circuit.\ It\ also\ gets\ used\ on\ a\ copy\ of\ the\ original\ circuit\ while\ identifying\ independent\ loops.\n\ @param\ r1\ \ One\ endpoint's\ row\n\ @param\ c1\ \ One\ endpoint's\ column\n\ @param\ r2\ \ The\ other\ endpoint's\ row\n\ @param\ c2\ \ The\ other\ endpoint's\ column\n
comment12.params=c
comment12.target=void\ removeComponent(Component)
comment12.text=\n\ Searches\ for\ the\ specified\ component\ and\ if\ found,\ removes\ it\ from\ the\ circuit.\ This\ can\ be\ used\ in\ the\ process\n\ of\ desiging\ a\ circuit.\ It\ also\ gets\ used\ on\ a\ copy\ of\ the\ original\ circuit\ while\ identifying\ independent\ loops.\n\ @param\ The\ component\ to\ be\ removed.\n
comment13.params=r1\ c1\ r2\ c2
comment13.target=Component\ getComponent(int,\ int,\ int,\ int)
comment13.text=\n\ Returns\ the\ component\ from\ a\ specified\ location\ in\ a\ circuit.\n\ @param\ r1\ \ One\ endpoint's\ row\n\ @param\ c1\ \ One\ endpoint's\ column\n\ @param\ r2\ \ The\ other\ endpoint's\ row\n\ @param\ c2\ \ The\ other\ endpoint's\ column\n\ @return\ \ Returns\ the\ component\ found\ at\ that\ location\ or\ null\ if\ no\ component\ is\ at\ that\ location.\n
comment14.params=row\ col
comment14.target=Terminal\ getTerminal(int,\ int)
comment14.text=\n\ @param\ row\ \ The\ row\ of\ the\ desired\ terminal\n\ @param\ col\ \ The\ column\ of\ the\ desired\ terminal.\n\ @return\ \ Returns\ the\ teminal\ at\ the\ specified\ location.\n
comment15.params=
comment15.target=int\ getRows()
comment15.text=\n\ @return\ \ Returns\ the\ number\ of\ rows\ of\ terminals\ in\ the\ circuit\n
comment16.params=
comment16.target=int\ getCols()
comment16.text=\n\ @return\ \ Returns\ the\ number\ of\ columns\ of\ terminals\ in\ the\ circuit\n
comment17.params=
comment17.target=int\ getNumBranches()
comment17.text=\n\ @return\ \ Returns\ the\ number\ independent\ branches\ in\ the\ circuit,\ excluding\ any\ branches\ that\ do\ not\ form\ complete\ circuits\n
comment18.params=
comment18.target=Terminal[][]\ getTerminals()
comment18.text=\n\ @return\ \ Returns\ a\ reference\ to\ the\ 2D\ array\ of\ terminals\ in\ the\ circuit\n
comment19.params=
comment19.target=java.util.List\ getComponents()
comment19.text=\n\ @return\ \ Returns\ a\ reference\ to\ the\ ArrayList\ of\ components\ in\ the\ circuit\n
comment2.params=
comment2.target=double[]\ solve()
comment2.text=\n\ This\ method\ uses\ several\ helper\ methods\ to\ solve\ a\ circuit\ via\ Kirchhoff's\ rules\ and\ linear\ algebra.\ \n\ After\ running\ it,\ each\ component\ will\ have\ been\ assigned\ a\ branch\ number,\ current,\ and\ a\ current\ direction;\n\ each\ Terminal\ will\ have\ a\ potential.\n\ @return\ \ Returns\ an\ array\ of\ currents.\ Each\ current\ is\ indexed\ by\ its\ branch\ number\ within\ the\ circuit.\ Returns\ null\ if\ it\ does\ not\ find\ a\ complete\ circuit.\n
comment20.params=
comment20.target=java.lang.String\ toString()
comment20.text=\n\ @return\ \ Returns\ a\ String\ list\ of\ the\ components\ within\ each\ branch\ of\ the\ circuit,\ including\ any\ dead-end\ branches\n
comment3.params=nodes\ origLoops
comment3.target=int\ findNodesAndLoops(java.util.List,\ java.util.List)
comment3.text=\n\ This\ method\ uses\ helper\ methods\ to\:\ \n\ \ \ \ \ (1)\ populate\ the\ ArrayList\ of\ nodes\ (junctions)\ for\ a\ circuit;\n\ \ \ \ \ (2)\ assign\ a\ current/branch\ number\ to\ each\ independent\ branch\ of\ the\ circuit;\n\ \ \ \ \ (3)\ assign\ a\ current\ direction\ to\ each\ component\ within\ each\ branch;\n\ \ \ \ \ (4)\ populate\ a\ List\ of\ loops,\ wherein\ each\ loop\ is\ a\ List\ of\ the\ components\ in\ that\ loop;\n\ @param\ nodes\ \ An\ empty\ ArrayList\ that\ will\ be\ populated\ with\ the\ terminals\ that\ are\ junctions\ in\ the\ circuit.\n\ @param\ loops\ \ An\ empty\ ArrayList\ of\ Lists\ of\ components\ that\ will\ be\ populated\ with\ components\ from\ circuit\ loops.\n\ @return\ The\ number\ of\ branches\ in\ the\ circuit,\ excluding\ any\ dead-end\ branches.\n
comment4.params=circ\ givenComp
comment4.target=Component\ findCorrespondingComponent(Circuit,\ Component)
comment4.text=\n\ Given\ a\ component\ (givenComp)\ in\ one\ circuit,\ this\ method\ finds\ the\ component\ attached\ to\ the\ same\ terminals\n\ in\ a\ different\ circuit\ (circ).\ If\ there\ is\ not\ a\ component\ attached\ to\ the\ same\ terminals,\ this\ returns\ null.\n\ @param\ circ\ \ The\ circuit\ you\ are\ searching\ in\n\ @param\ givenComp\ \ The\ component\ from\ the\ original\ circuit\n\ @return\ \ The\ component\ that\ is\ found\ connected\ to\ the\ same\ terminals\ as\ comp,\ but\ in\ a\ different\ circuit,\ circ,\ \n\ \ \ \ \ \ \ \ \ \ or\ null\ if\ no\ such\ component\ exists\ in\ circ\n
comment5.params=
comment5.target=boolean\ removeDanglers()
comment5.text=\n\ If\ a\ circuit\ has\ dead-ends,\ this\ method\ removes\ the\ last\ component\ in\ each\ dead-end\ branch.\n\ @return\ Returns\ "true"\ if\ any\ components\ were\ removed;\ false\ otherwise.\n
comment6.params=nodes
comment6.target=void\ findNodes(java.util.List)
comment6.text=\n\ Searches\ the\ 2-D\ array\ of\ terminals\ for\ a\ circuit\ to\ find\ junctions.\ Adds\ any\ terminals\ that\ have\ three\ or\ more\ connections\n\ to\ a\ List\ of\ nodes.\ The\ provided\ list\ of\ nodes\ is\ first\ cleared,\ and\ then\ repopulated.\n\ @param\ nodes\ \ A\ reference\ to\ a\ List\ of\ terminals.\n
comment7.params=nodes
comment7.target=boolean\ labelBranches(java.util.List)
comment7.text=\n\ Labels\ each\ component\ in\ the\ circuit\ with\ a\ branch\ number.\ The\ current\ through\ all\ components\ in\ a\ branch\ are\ the\ same,\n\ so\ branch\ numbers\ correspond\ to\ current\ variables\ in\ the\ circuit\ equations.\ E.g.\ current[0]\ \=\ current\ through\ components\n\ labeled\ with\ branch\ 0.\ This\ method\ also\ assigns\ a\ current\ direction\ to\ each\ component\ within\ a\ branch.\ Branches\ that\ are\ \n\ dead-ends\ are\ given\ the\ branch\ number\ 999.\n\ @param\ nodes\ \ The\ List\ of\ nodes\ (junctions)\ in\ the\ circuit.\n\ @return\ True\ if\ there\ is\ a\ complete\ circuit;\ false\ if\ there\ is\ no\ complete\ circuit.\n
comment8.params=loops\ nodes
comment8.target=void\ calculatePotentials(java.util.List,\ java.util.List)
comment8.text=\n\ Finds\ the\ potential\ at\ each\ terminal\ in\ the\ circuit.\ Disconnected\ terminals\ are\ left\ at\ their\ default\ potental\n\ of\ Double.MAX_VALUE.\n\ @param\ loops\ \ A\ List\ of\ the\ ArrayLists\ of\ components\ in\ each\ circuit\ loop\n\ @param\ nodes\ \ A\ List\ of\ the\ circuit\ nodes/junctions\n
comment9.params=c\ r1\ c1\ r2\ c2
comment9.target=boolean\ addComponent(Component,\ int,\ int,\ int,\ int)
comment9.text=\n\ Adds\ a\ component\ to\ a\ to\ a\ specific\ location\ in\ a\ circuit.\ Ordinarily\ this\ is\ performed\ only\ when\ first\ specifying\ \n\ the\ circuit.\ If\ a\ different\ component\ already\ exists\ at\ the\ specified\ location,\ this\ method\ has\ no\ effect.\ \n\ Updates\ the\ endpoints\ of\ the\ component\ so\ that\ it\ knows\ what\ terminals\ it\ is\ connected\ to.\ Updates\ those\n\ terminals\ so\ that\ they\ know\ they\ are\ connected\ to\ this\ component.\ If\ the\ component\ is\ a\ battery,\ this\ method\ defaults\ to\n\ making\ endPoint1\ the\ positive\ terminal\ of\ the\ battery.\n\ @param\ c\ \ The\ component\ to\ be\ added\n\ @param\ r1\ \ Endpoint\ 1's\ row\n\ @param\ c1\ \ Endpoint\ 1's\ column\n\ @param\ r2\ Endpoint\ 2's\ row\n\ @param\ c2\ \ Endpoint\ 2's\ column\n\ return\ \ True\ if\ component\ is\ successfully\ added\ to\ circuit;\ false\ if\ the\ component\ was\ not\ added\n
numComments=21
